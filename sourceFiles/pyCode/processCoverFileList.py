# Author: Avinash Srinivasan
# Source Code: processCoverFileList.py
# This file takes as input the the file generated by calc_slack_usr.bash
# The output of the bashfile is a .txt file with the file name/path of all
# and their available slack space. However the fgile path and their sizes are
# on separate lines and the file also has some extra entries.
# The .py file will process the files generating three separate files
#  1. usrCoverFileName.txt
#  2. usrCoverFileSize.txt
#  3. usrCoverFileList.txt (this is 1 and 2 combined)
# The output file is used in the slackFS project.
from email.mime import base
import os, sys
from stat import *

###
# NEEDS TO BE CHANGED:
# Change this to take args for which /base it wants to do usr, sys, etc
# Change the os.system calls to process calls
###
basePath = "../../textFiles/"
totalSlackTxt = basePath + "usrTotalSlack.txt"
fileNameTxt = basePath + "usrCoverFileName.txt"
fileSizeTxt = basePath + "usrCoverFileSize.txt"
count_name=0
count_size=0
count_notREGfile=0
count_REGfile=0
with open(totalSlackTxt, "r") as input:
    lines = input.readline()
    with open(fileNameTxt, "w") as output1:
        with open(fileSizeTxt, "w") as output2:
            while lines:
                fileName = str(lines.strip())
                if '/usr' in lines:
                    if os.path.isfile(fileName):
                        count_REGfile+=1
                        lines = input.readline()
                        if '/usr' not in lines and 'null block' not in lines:
                            if int(lines) > 2000 and int(lines) < 4096:
                                output1.write(fileName+'\n')
                                count_name+=1
                                output2.write(lines)
                                count_size+=1
                            else:
                                lines = input.readline()
                                continue
                    else:
                        count_notREGfile+=1
                        lines = input.readline()
                        continue
                    lines = input.readline()
                else:
                    lines = input.readline()
        output2.close()
    output1.close()
input.close()
print(count_name, count_size, count_REGfile, count_notREGfile)

# Below code merges the name and size files into one file
# It concatenates each line from the two files, one line each
# Example:
# usrCoverFileList.txt line1 --> usrCoverFileName.txt line1 + usrCoverFileSize.txt line1
os.system(f"paste -d '\t' {fileNameTxt} {fileSizeTxt} > {basePath}usrCoverFileList.txt")
