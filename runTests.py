# /usr/bin/env python3

import pandas as pd
import subprocess
from argparse import ArgumentParser
from os import mkdir, remove
from os.path import isdir
from pathlib import Path
from time import time

from slackfs.logger import LOGGER

BACKENDS = [
    "jerasure_rs_vand",
    "isa_l_rs_vand",
    "liberasurecode_rs_vand",
    "isa_l_rs_cauchy",
]

FRAG_PAIRS = [
    (16, 4),
    (16, 8),
    (16, 16),
    (32, 4),
    (32, 8),
    (32, 16),
    (64, 4),
    (64, 8),
    (64, 16),
]


def runTests(cover_file: Path, disk_file: Path, out_dir: Path):
    # for each fragment pair run each backend and record the amount of time it takes to hide and retrieve
    for k, p in FRAG_PAIRS:
        data: [str, list] = {}
        for backend in BACKENDS:
            data["run #"] = []
            data[f"hide_{backend}"] = []
            data[f"retrieve_{backend}"] = []
            for i in range(100):
                LOGGER.info(f"Running test {i} for backend {backend} for fragment pair ({k}, {p})")
                data["run #"].append(i+1)
                start_time = time()
                proc = subprocess.run(
                    [
                        "./slackfs.pyz",
                        "-k",
                        str(k),
                        "-p",
                        str(p),
                        "-e",
                        backend,
                        "hide",
                        "-cf",
                        cover_file,
                        "-mf",
                        "tmp_map.json",
                        "-df",
                        disk_file,
                    ],
                    capture_output=True,
                )
                stop_time = time()
                if proc.returncode != 0:
                    LOGGER.error(f"Hide test {i} for backend: {backend}, frag_pair: ({k},{p}) failed, stdout below")
                    LOGGER.error(proc.stdout)
                    exit(-1)
                data[f"hide_{backend}"].append(stop_time-start_time)

                start_time = time()
                proc = subprocess.run(
                    [
                        "./slackfs.pyz",
                        "-k",
                        str(k),
                        "-p",
                        str(p),
                        "-e",
                        backend,
                        "retrieve",
                        "-mf",
                        "tmp_map.json",
                        "-of",
                        "tmp_test.dmg",
                    ],
                    capture_output=True,
                )
                if proc.returncode != 0:
                    LOGGER.error(
                        f"Retrieve test {i} for backend: {backend}, frag_pair: ({k},{p}) failed, stdout below"
                    )
                    LOGGER.error(proc.stdout)
                    exit(-1)
                stop_time = time()
                data[f"retrieve_{backend}"].append(stop_time-start_time)
        data = dict(sorted(data.items()))
        df = pd.DataFrame.from_dict(data)
        df = df.set_index("run #")

        df.to_csv(f"{out_dir}/data_{k}k_{p}p.csv")

    remove("tmp_test.dmg")
    remove("tmp_map.json")


def main() -> None:
    parser = ArgumentParser(
        prog="runTests.py", description="Used to generate the tests for slackFS, will output to tests directory"
    )
    parser.add_argument("-df", "--disk-file", type=Path, help="File to hide in testing", required=True)
    parser.add_argument(
        "-cf",
        "--cover-file",
        type=Path,
        help="List of cover files. Should be generated by slackFS separately",
        required=True,
    )
    parser.add_argument("-od", "--output-dir", type=Path, help="Output directory to write csv to", required=True)

    args = parser.parse_args()
    if not args.cover_file.is_file():
        LOGGER.error(f"{args.cover_file} is not a file")
        exit(-1)
    if not args.disk_file.is_file():
        LOGGER.error(f"{args.disk_file} is not a file")
        exit(-1)
    if not args.output_dir.is_dir():
        mkdir(args.output_dir)
    runTests(cover_file=args.cover_file, disk_file=args.disk_file, out_dir=args.output_dir)


if __name__ == "__main__":
    main()
